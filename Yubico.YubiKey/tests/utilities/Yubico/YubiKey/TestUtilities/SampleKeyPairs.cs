// Copyright 2021 Yubico AB
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System.Security.Cryptography.X509Certificates;
using Yubico.YubiKey.Piv;

namespace Yubico.YubiKey.TestUtilities
{
    public static class SampleKeyPairs
    {
        // Get a matching key pair. Return the keys as strings, the PEM key data.
        public static void GetPemKeyPair(PivAlgorithm algorithm, out string publicKey, out string privateKey)
        {
            switch (algorithm)
            {
                default:
                    publicKey =
                        "-----BEGIN PUBLIC KEY-----\n" +
                        "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgE3OZMV7eQ+b+qFSDdQ5TCQ9pgg2\n" +
                        "9dxmUGX87owhbBHgU+RrlNd5Xi/qfcjl0qD1yJuM0vg5m4NjqT3zx6q0+Q==\n" +
                        "-----END PUBLIC KEY-----";

                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgIEdISnMgVtpVb28B\n" +
                        "8mxlrQ7eHtw8WbtvuV6BaK6jm/yhRANCAASATc5kxXt5D5v6oVIN1DlMJD2mCDb1\n" +
                        "3GZQZfzujCFsEeBT5GuU13leL+p9yOXSoPXIm4zS+Dmbg2OpPfPHqrT5\n" +
                        "-----END PRIVATE KEY-----";

                    break;

                case PivAlgorithm.EccP384:
                    publicKey =
                        "-----BEGIN PUBLIC KEY-----\n" +
                        "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEDCbayUu6FFcW/aH103hlh0cw8s/gxM5L\n" +
                        "TTT99sNZZOFtcSWEe0dFI7oQ4kZHO8AuHt1FjfsB1Bi7aHXrjC558b6eNKbEd5P0\n" +
                        "lVGwp+lD9EBRfyTk7/Xxran3HARlTR7f\n" +
                        "-----END PUBLIC KEY-----";

                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAKroxlCShQ6sz89gMc\n" +
                        "K09DIyI8kxaRZt9GlCMmbbmVpGhqhQLvwVdowQkA0xQ9A3+hZANiAAQMJtrJS7oU\n" +
                        "Vxb9ofXTeGWHRzDyz+DEzktNNP32w1lk4W1xJYR7R0UjuhDiRkc7wC4e3UWN+wHU\n" +
                        "GLtodeuMLnnxvp40psR3k/SVUbCn6UP0QFF/JOTv9fGtqfccBGVNHt8=\n" +
                        "-----END PRIVATE KEY-----";

                    break;

                case PivAlgorithm.Rsa1024:
                    publicKey =
                        "-----BEGIN PUBLIC KEY-----\n" +
                        "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCxv2vOcMt+rn+EZsKSP5UlIuG3\n" +
                        "LnhiWKHaVEvfQJwXiOhxRCtowX9J4ij14ZB5zvwrmoxfMn2uu4ZB8QvuztdNiSKZ\n" +
                        "Kenqx5uqV4ki9gns1remcuwGo/C2GvDY/Bpd4pDgWzARvc3QPMVVKic2JCRb5/pS\n" +
                        "UkvURwGtOC+51NPIrwIDAQAB\n" +
                        "-----END PUBLIC KEY-----";

                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALG/a85wy36uf4Rm\n" +
                        "wpI/lSUi4bcueGJYodpUS99AnBeI6HFEK2jBf0niKPXhkHnO/CuajF8yfa67hkHx\n" +
                        "C+7O102JIpkp6erHm6pXiSL2CezWt6Zy7Aaj8LYa8Nj8Gl3ikOBbMBG9zdA8xVUq\n" +
                        "JzYkJFvn+lJSS9RHAa04L7nU08ivAgMBAAECgYBxAADJfWvhXY4z3iBUWZe3xDU6\n" +
                        "/5AI9c/vvSd/BtQ1IhSj7XKrZlhF4EGqD3yJ88zc66PR4YeFTjJMObIcX+L/l0Ki\n" +
                        "Yx+OyjthW7b9pVEjrUBc1Cbj26r8PzRCEM41zZy6jLB6M1Oi71hRYU6ZaetBnp2T\n" +
                        "U2A5yUWoF2YT9VMSAQJBAOyEDRayskWsv9FIb9j0p42fLnhfMp4oUMvAQBQfRPEl\n" +
                        "0wgbPHG2KHKeZCkpEkn1D6VFu8JAVkXNaz77Op9LiV0CQQDAY/5Gt+Wrjekz6myM\n" +
                        "rDhRhoOmX6eSFCTzqOvZVLc/jy4aMLYC3VGmyiHOEXD5ONyE+LSKnbJxrK3vriKh\n" +
                        "Cl17AkEA2KNXzcueaR2DkXHVKRdnhdwhV5ZzKdTptMeCqiu+HVg1BT7VTZ65S8tz\n" +
                        "GRSKsP1r+El4YsRFgahXrJe3qYMp7QJBAL+TEoGC3y0sG3p5xWtyloX/xxolh+w7\n" +
                        "KOyEWY3JAMxGm+ayeJtznLnT70OONIvGpje2m7in/SeahnzzTkJD2v8CQHWezzo3\n" +
                        "m6NRXXDkbY7cLTnkk9zkQwkOjZO+/ChlQ6trrJ7UAKGL5Gj8x3gXbBrbU5mv7xL/\n" +
                        "Py1ySQ4xSMT/gB0=\n" +
                        "-----END PRIVATE KEY-----";

                    break;

                case PivAlgorithm.Rsa2048:
                    publicKey =
                        "-----BEGIN PUBLIC KEY-----\n" +
                        "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA239gOKe2rLurJ/QH5OAf\n" +
                        "JnGdQJCamKeVQX+gNsUVxLA8Q/6gX/HE4XmhOgeqC9M0s/S34Lm/1/wPnvDLHDGy\n" +
                        "Aw5vvWmsRXaNgFEKj2eRdPK8Uayw05MoocGHFHIheCjvtuAeRnuVd7Ok6SpcrvCA\n" +
                        "Xgx9DY2e3bEP5KyVZRncBUh1pt2tQIuMiTM3ofCKuYC+tON77Q/QNm0MzOJFFsPU\n" +
                        "IcCf5jIvS0f2C8U91AAgbylKq1RWOXcYnHEbD/e3kevD+e6KLHka46a0Nxpf9SC8\n" +
                        "PVvlTqqV7LqgNJcxXtGoOeiFLnx9evLmtngsx8nndLLoG7iMeslg+XbkuE8z/6wk\n" +
                        "gQIDAQAB\n" +
                        "-----END PUBLIC KEY-----";

                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIIEwAIBADANBgkqhkiG9w0BAQEFAASCBKowggSmAgEAAoIBAQDbf2A4p7asu6sn\n" +
                        "9Afk4B8mcZ1AkJqYp5VBf6A2xRXEsDxD/qBf8cTheaE6B6oL0zSz9Lfgub/X/A+e\n" +
                        "8MscMbIDDm+9aaxFdo2AUQqPZ5F08rxRrLDTkyihwYcUciF4KO+24B5Ge5V3s6Tp\n" +
                        "Klyu8IBeDH0NjZ7dsQ/krJVlGdwFSHWm3a1Ai4yJMzeh8Iq5gL6043vtD9A2bQzM\n" +
                        "4kUWw9QhwJ/mMi9LR/YLxT3UACBvKUqrVFY5dxiccRsP97eR68P57ooseRrjprQ3\n" +
                        "Gl/1ILw9W+VOqpXsuqA0lzFe0ag56IUufH168ua2eCzHyed0sugbuIx6yWD5duS4\n" +
                        "TzP/rCSBAgMBAAECggEBAIRS/NoK2Yi2to8mgZ/MMVtGwQtMYbbHyKYs35RFKkNi\n" +
                        "D2LaXSqaIRvg7H6EYlIwqKQYUsXqlSoLLguelIPRvcQz7s8cpptVxiZmNNyRDlKX\n" +
                        "h0ohtpRGMgeaGOoNh/ndi+4OnJHXLRt1tGRQgoGAQZLxKm6CQxTZCoDMPmAtv8N6\n" +
                        "dobrCgF4dmDZ2bPjGszn/c51tjdN2l8JtgOxp6LD+cK0sdkQCctn8W+xJLhXrBcX\n" +
                        "JwJGqczX7cH9hvLRnCvTOJbRsb24b1YTPML4rQVkLzdtTWySCI5V6miWSl7q7HV/\n" +
                        "kyloRv2Eqos0erat6Z2tyVCvuJRo1y5m0qnpd/+JXZUCgYEA75LITbF4XoC1MLpA\n" +
                        "ZchbtUukHfjmiIUmiDX2QkopeyrCOEOwiDHMrq54/ZbIxwnePXHgyEhycDHyxki1\n" +
                        "l7XlVgmqg8gX0lHFc0P6bNKSEQMIp+aKF2ZFFqNKV3I4gZnLL4+5+52ddWPsk1Qd\n" +
                        "dVRdvbdtuzR6k0v2tGvd3jkRCvcCgYEA6ow0Nbrs5lJ2EQcbzB7Tpi/jJwAuKu/f\n" +
                        "rKS2Z1HtqhqH9I9O7o2QbCoCMZKiJgpYRpdpy7h3cGAAUvLp7nniLiQJDrwtNQLk\n" +
                        "arItdaoxLZyQhI8yEOBJ0lRbCq5ugbFN+NilJwQuSVM5uyNPcxgqdYGHFqF44LGQ\n" +
                        "OZ/XCC7uNkcCgYEA7RKunpuRRstNAgQ9d7tWbUiGBpbo4o4IvF/R6nVjKRv+CBmL\n" +
                        "1qqZJv9GgYO1+ajdQKaxTuDKRhZXbTpEYPXCFWsJTtEyKZF7t/28EfYqTyVWangr\n" +
                        "jM5KbgV2qqRAIJflRpKO89xcFe+lC4IAiLvM69FZiBh9d8eDQbVAYAjOwa8CgYEA\n" +
                        "xWCtQxYF7CEyyEuSIelDNRQRdS2arHlmYpPOCA6TEVX4WV8MDoZFJjEH3Y3HNHn6\n" +
                        "JZWf61dV89RmEWfoYs5g/3FFygejh3vimsNMrDtH3Vlm6JbUjA0jMoPYhZma1ztN\n" +
                        "IX+3I6lKBlyqNYiWgIWynWYeN3Y1Eel7NHMFcxaDUlsCgYEAvZ4e7yo9iz9gmtri\n" +
                        "hlD0QnuM/5MLdczSwtDeZuGnalOAWWPGWMPp+SJ7t2sU+Xe/ytVGDQWmc/tzKoGG\n" +
                        "rG7dSk9mkT4rod2gfKZdHdAsTQjvbx8lrezSgRHGYQF991Z4GTSTO2pe3r/LwhjP\n" +
                        "iZZjh4mwb45JukjeGimRP9H3aio=\n" +
                        "-----END PRIVATE KEY-----";

                    break;
            }
        }

        // Get a private key for the given algorithm. Return the key as a
        // PivPrivateKey.
        public static PivPrivateKey GetPrivateKey(PivAlgorithm algorithm) => algorithm switch
        {
            PivAlgorithm.Rsa1024 => PivPrivateKey.Create(new byte[] {
                0x01, 0x40,
                0xdf, 0x2c, 0x15, 0xe7, 0x9f, 0xf7, 0xf0, 0xe4, 0x36, 0xfd, 0x93, 0x1f, 0xd7, 0x36, 0x20, 0x2e,
                0x70, 0xd2, 0x51, 0xe4, 0x4a, 0x5d, 0xf8, 0xbb, 0xfd, 0x2d, 0x66, 0xd1, 0xe5, 0x1d, 0x5e, 0x92,
                0x9b, 0xa8, 0xba, 0x9c, 0xfd, 0x53, 0x72, 0x93, 0xee, 0x98, 0x33, 0xc6, 0xe5, 0x23, 0xcb, 0x79,
                0x74, 0xad, 0x8f, 0x31, 0xb4, 0xa2, 0x6b, 0x46, 0xef, 0x8e, 0xad, 0x53, 0x6b, 0xb0, 0x5e, 0xc3,
                0x02, 0x40,
                0xd7, 0x96, 0x0f, 0x54, 0xfd, 0xc9, 0xa8, 0x6f, 0xcb, 0xc2, 0xea, 0x13, 0x58, 0xf6, 0x47, 0x87,
                0x59, 0x84, 0xba, 0x1c, 0x68, 0x9d, 0xbf, 0x29, 0xbd, 0x20, 0x7d, 0x84, 0xcf, 0x12, 0xcf, 0xe7,
                0xb5, 0x6f, 0x05, 0x37, 0xa3, 0x3a, 0x7c, 0x0a, 0x6f, 0x7c, 0x1b, 0xa0, 0x06, 0x23, 0x4b, 0x15,
                0x09, 0xbb, 0x46, 0x5d, 0xba, 0x28, 0x3d, 0x36, 0x58, 0x66, 0x34, 0x7d, 0x7f, 0x88, 0x1a, 0xa9,
                0x03, 0x40,
                0x1e, 0xfb, 0x35, 0xc7, 0x43, 0xf3, 0xdd, 0xa3, 0x30, 0xe7, 0x1e, 0xe7, 0x8a, 0xae, 0xde, 0xe4,
                0xd3, 0x90, 0xbf, 0x01, 0x9c, 0x39, 0x53, 0x70, 0x75, 0x83, 0x3a, 0x04, 0xe5, 0x73, 0xa0, 0x4f,
                0x66, 0x00, 0x94, 0x77, 0x7a, 0xcb, 0x7c, 0xda, 0x80, 0x82, 0xec, 0x9d, 0x2d, 0xee, 0x3c, 0x2f,
                0x0e, 0x3d, 0x91, 0xe5, 0x6a, 0x98, 0x29, 0xa0, 0x5d, 0x5d, 0x47, 0x3e, 0x8f, 0x72, 0x9a, 0x95,
                0x04, 0x40,
                0x8a, 0x40, 0xa5, 0x5c, 0x6f, 0xd4, 0x5e, 0xbc, 0x33, 0x03, 0xb0, 0x70, 0xef, 0xe0, 0x20, 0x46,
                0xe0, 0x55, 0x89, 0xb4, 0xa6, 0x32, 0x63, 0x61, 0x34, 0xf4, 0x1d, 0x0a, 0x8a, 0x71, 0x19, 0xfb,
                0x12, 0x13, 0x3c, 0x59, 0x4d, 0xc8, 0x37, 0xbb, 0xc9, 0x7a, 0xe1, 0x8c, 0x61, 0xe3, 0x48, 0x47,
                0x19, 0x92, 0x8b, 0xb1, 0x97, 0xac, 0x2e, 0x75, 0x27, 0x83, 0x83, 0xad, 0xe7, 0x97, 0x34, 0xe1,
                0x05, 0x40,
                0x19, 0x51, 0x79, 0x1e, 0x4e, 0x1f, 0xb1, 0xe9, 0xc1, 0x59, 0x9c, 0x69, 0xc8, 0xda, 0x2d, 0x8d,
                0xb7, 0x04, 0xa0, 0x7d, 0xd1, 0x45, 0x9f, 0xc8, 0xae, 0x97, 0xf7, 0x77, 0xe2, 0x53, 0x98, 0x48,
                0xd5, 0x75, 0xfb, 0xff, 0xfa, 0x17, 0xb0, 0xc7, 0x4a, 0x46, 0xb0, 0xa7, 0xa6, 0x0e, 0x5e, 0x2c,
                0xfd, 0xda, 0x5b, 0xbb, 0xc1, 0x0a, 0x77, 0x73, 0x0a, 0xaa, 0x1e, 0xc5, 0x66, 0x42, 0x96, 0xcf
            }),

            PivAlgorithm.Rsa2048 => PivPrivateKey.Create(new byte[] {
                0x02, 0x81, 0x80,
                0xcf, 0xd5, 0x17, 0xb1, 0x3c, 0x65, 0x10, 0xb9, 0x02, 0xc8, 0x0b, 0xd8, 0xfb, 0xb3, 0x2d, 0xec,
                0x5c, 0x33, 0x24, 0x50, 0xd6, 0x0f, 0x13, 0xb4, 0x31, 0xcb, 0x41, 0xfc, 0x7c, 0x60, 0xbf, 0x2a,
                0x62, 0x81, 0x57, 0x54, 0xcd, 0x07, 0xe8, 0x9b, 0x46, 0x7d, 0x74, 0x97, 0x30, 0x45, 0x65, 0x93,
                0x9a, 0x78, 0x94, 0x45, 0xd1, 0xbc, 0x65, 0xae, 0x5e, 0xc7, 0xa0, 0x87, 0x89, 0xf0, 0xdc, 0x46,
                0x22, 0x77, 0xa0, 0x39, 0xd3, 0x80, 0x51, 0x23, 0x19, 0x51, 0x9c, 0x4f, 0x78, 0x30, 0x8a, 0x85,
                0x9c, 0x76, 0xee, 0xbd, 0xc9, 0xd5, 0x9b, 0x0d, 0x77, 0xd1, 0xa5, 0xa1, 0x85, 0x07, 0x39, 0x99,
                0x5e, 0x19, 0x3d, 0x4c, 0x98, 0xe8, 0x10, 0x6a, 0x71, 0x93, 0x6a, 0x8a, 0x29, 0xdc, 0xbe, 0x45,
                0xf2, 0x79, 0x3c, 0x86, 0x63, 0x50, 0x99, 0xfa, 0xc9, 0x96, 0x9b, 0x13, 0x66, 0x4b, 0x84, 0xa3,
                0x05, 0x81, 0x80,
                0x34, 0x37, 0x0c, 0xd6, 0x70, 0x8b, 0x2b, 0x0d, 0xc8, 0x2a, 0xdc, 0x4e, 0x66, 0xdb, 0x99, 0xa5,
                0x49, 0x99, 0xf6, 0xe9, 0x59, 0x7b, 0xff, 0x6b, 0x1e, 0x86, 0x76, 0x0c, 0xc1, 0xbc, 0x6d, 0x68,
                0xcc, 0x93, 0x4a, 0xb3, 0xb6, 0xdc, 0xb3, 0xf4, 0x93, 0x2c, 0x7e, 0xe4, 0xaa, 0x11, 0x6b, 0x96,
                0xcc, 0x54, 0xdf, 0x86, 0xe7, 0xa3, 0x3c, 0x0f, 0x0c, 0x90, 0x6b, 0xd1, 0x3f, 0xe8, 0xba, 0x40,
                0x28, 0xed, 0x9e, 0xe5, 0xe0, 0xd3, 0x0a, 0x04, 0x90, 0x9a, 0x1d, 0xc4, 0x2d, 0x13, 0xf8, 0xa1,
                0x25, 0xd4, 0xf2, 0x9e, 0x14, 0x43, 0xf7, 0x6b, 0x8c, 0x41, 0x6d, 0xb0, 0x32, 0x0d, 0xe6, 0x21,
                0x84, 0x61, 0x50, 0xf4, 0xbf, 0x72, 0x9c, 0x0a, 0xbf, 0x02, 0x03, 0x66, 0x21, 0xec, 0xc6, 0xd9,
                0xcc, 0x7e, 0x15, 0xb1, 0xc5, 0x00, 0x84, 0x8d, 0xe3, 0x42, 0x0c, 0xf5, 0xd2, 0x82, 0x71, 0x70,
                0x01, 0x81, 0x80,
                0xdf, 0x4d, 0x54, 0xdb, 0x53, 0x94, 0xe6, 0x62, 0x1b, 0xfb, 0xe7, 0x92, 0xe9, 0x5c, 0x57, 0xa1,
                0xfb, 0xe9, 0x52, 0xb3, 0xba, 0x7b, 0x57, 0x9c, 0x03, 0xb4, 0xa5, 0x80, 0xe6, 0xe5, 0xbb, 0x9a,
                0x61, 0x54, 0x24, 0x49, 0xd3, 0x26, 0x76, 0xd9, 0xde, 0xae, 0x1b, 0xd7, 0x1f, 0x4b, 0x5a, 0x13,
                0x81, 0xf8, 0x8d, 0x28, 0x39, 0x35, 0xb6, 0x37, 0x70, 0xc3, 0x09, 0x54, 0xbd, 0x4b, 0xbd, 0x9e,
                0xa8, 0x78, 0x31, 0x25, 0x22, 0xb5, 0x54, 0xdc, 0xab, 0x5b, 0xa6, 0x70, 0xd3, 0x3a, 0x79, 0xae,
                0x3b, 0x67, 0x22, 0x0d, 0x64, 0xc6, 0x05, 0x1f, 0x04, 0x30, 0x8c, 0x27, 0xc1, 0x73, 0x2c, 0x9a,
                0x74, 0xeb, 0x50, 0x28, 0xb9, 0x55, 0xa0, 0xed, 0xba, 0x17, 0x8b, 0x8c, 0x4b, 0x21, 0xce, 0x04,
                0x61, 0xa9, 0x62, 0x84, 0xa8, 0x05, 0x01, 0xed, 0x69, 0x67, 0xa0, 0xbe, 0xc8, 0xe9, 0x08, 0x13,
                0x03, 0x81, 0x80,
                0x20, 0xa5, 0x20, 0x8b, 0xb3, 0xeb, 0x67, 0xc6, 0xde, 0x0a, 0x74, 0xaf, 0x60, 0x98, 0x54, 0x63,
                0x64, 0xfd, 0x96, 0x4e, 0x9a, 0x2b, 0xa0, 0x02, 0x39, 0xf4, 0x75, 0xe1, 0xa3, 0x5f, 0xe0, 0x8e,
                0x50, 0x3e, 0x49, 0xd3, 0xd5, 0x1f, 0xa1, 0x6e, 0x76, 0x84, 0x83, 0xa3, 0x6e, 0x7a, 0xc8, 0x9f,
                0x63, 0x77, 0xdf, 0xc3, 0x0a, 0xa2, 0x14, 0x92, 0x84, 0x54, 0xaf, 0x0f, 0x89, 0x61, 0x02, 0x46,
                0xa8, 0xa0, 0x71, 0xa6, 0xd9, 0x2d, 0x23, 0x4b, 0xe3, 0x6d, 0x51, 0xa6, 0xda, 0xea, 0x88, 0x91,
                0x75, 0x33, 0xbd, 0xa1, 0xb1, 0xa2, 0xd5, 0x6a, 0xd4, 0x64, 0xf8, 0x88, 0x73, 0x5a, 0x90, 0x21,
                0xc0, 0x88, 0x0a, 0x3e, 0xf9, 0xe1, 0x4f, 0xd6, 0x91, 0x47, 0x11, 0xea, 0x9f, 0xad, 0x40, 0x7e,
                0x19, 0x7c, 0xf6, 0xdf, 0x27, 0xe5, 0x1b, 0x84, 0x06, 0xcd, 0xd4, 0x8d, 0x2f, 0xb8, 0x09, 0xab,
                0x04, 0x81, 0x80,
                0x39, 0xdb, 0xe4, 0x25, 0xa6, 0x5f, 0xa8, 0x81, 0x29, 0x22, 0x12, 0x12, 0x4d, 0x38, 0x3b, 0xcf,
                0xb2, 0x77, 0x56, 0x63, 0xde, 0xc4, 0x01, 0xc3, 0x47, 0x9d, 0x83, 0x78, 0x4c, 0x14, 0x0f, 0x04,
                0x38, 0xba, 0x33, 0x5a, 0xdb, 0x5d, 0x99, 0x47, 0x29, 0x1f, 0xa2, 0x06, 0xb9, 0x1c, 0x88, 0xc3,
                0xc7, 0xdc, 0x4b, 0xc3, 0x08, 0x39, 0xbf, 0xc1, 0x04, 0x87, 0xe4, 0xcb, 0xf6, 0xfe, 0x04, 0x04,
                0xce, 0x71, 0xa9, 0x3c, 0x90, 0x02, 0x08, 0x14, 0x92, 0x66, 0xe2, 0xf2, 0x48, 0xce, 0x92, 0xb1,
                0xd1, 0xb6, 0x56, 0x8e, 0xa5, 0x92, 0xff, 0x00, 0x87, 0xdb, 0xe8, 0x95, 0x87, 0xd8, 0x54, 0x13,
                0xbb, 0x5b, 0xa1, 0x72, 0x22, 0x9b, 0x70, 0x7e, 0x81, 0xb1, 0xfd, 0x96, 0x0b, 0x43, 0x76, 0x01,
                0x39, 0x18, 0xc1, 0x5d, 0xd4, 0x66, 0x4b, 0x07, 0xc3, 0x79, 0x57, 0x20, 0xd6, 0x78, 0xad, 0xab,
            }),

            PivAlgorithm.EccP256 => PivPrivateKey.Create(new byte[] {
                0x06, 0x20,
                0xba, 0x29, 0x7a, 0xc6, 0x64, 0x62, 0xef, 0x6c, 0xd0, 0x89, 0x76, 0x5c, 0xbd, 0x46, 0x52, 0x2b,
                0xb0, 0x48, 0x0e, 0x85, 0x49, 0x15, 0x85, 0xe7, 0x7a, 0x74, 0x3c, 0x8e, 0x03, 0x59, 0x8d, 0x3a
            }),

            _ => PivPrivateKey.Create(new byte[] {
                0x06, 0x30,
                0x47, 0x85, 0xde, 0x3a, 0xff, 0x10, 0x0d, 0x67, 0xa7, 0x26, 0x30, 0x62, 0x73, 0x45, 0xfd, 0xce,
                0xeb, 0xb9, 0xbe, 0x4c, 0x93, 0x42, 0xcd, 0x6a, 0x84, 0xd6, 0x8e, 0x00, 0x70, 0x70, 0x4c, 0x66,
                0x63, 0x53, 0xa0, 0x2c, 0xb9, 0xa7, 0x61, 0xcf, 0x56, 0xf0, 0x45, 0x07, 0xa6, 0xfb, 0x9f, 0x5a
            }),
        };

        // This gets a private key with a cert that contains the public key
        // partner. This can only get one key and cert (the same one each time)
        // and it is a 2048-bit RSA key.
        public static bool GetMatchingKeyAndCert(
            out X509Certificate2 cert, out PivPrivateKey privateKey)
        {
            byte[] certDer = new byte[] {
                0x30, 0x82, 0x03, 0xAE, 0x30, 0x82, 0x02, 0x96, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00,
                0xCB, 0x4C, 0xB9, 0x7C, 0x9B, 0xF1, 0x88, 0xD6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86,
                0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x6C, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55,
                0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C,
                0x0A, 0x43, 0x61, 0x6C, 0x69, 0x66, 0x6F, 0x72, 0x6E, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06,
                0x03, 0x55, 0x04, 0x07, 0x0C, 0x09, 0x50, 0x61, 0x6C, 0x6F, 0x20, 0x41, 0x6C, 0x74, 0x6F, 0x31,
                0x11, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x08, 0x46, 0x61, 0x6B, 0x65, 0x52, 0x6F,
                0x6F, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x04, 0x46, 0x61, 0x6B,
                0x65, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x09, 0x46, 0x61, 0x6B, 0x65,
                0x20, 0x52, 0x6F, 0x6F, 0x74, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x39, 0x30, 0x38, 0x31, 0x33, 0x32,
                0x31, 0x30, 0x32, 0x35, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x39, 0x30, 0x38, 0x31, 0x30, 0x32, 0x31,
                0x30, 0x32, 0x35, 0x39, 0x5A, 0x30, 0x6C, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
                0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x0A, 0x43,
                0x61, 0x6C, 0x69, 0x66, 0x6F, 0x72, 0x6E, 0x69, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,
                0x04, 0x07, 0x0C, 0x09, 0x50, 0x61, 0x6C, 0x6F, 0x20, 0x41, 0x6C, 0x74, 0x6F, 0x31, 0x11, 0x30,
                0x0F, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x08, 0x46, 0x61, 0x6B, 0x65, 0x52, 0x6F, 0x6F, 0x74,
                0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x04, 0x46, 0x61, 0x6B, 0x65, 0x31,
                0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x09, 0x46, 0x61, 0x6B, 0x65, 0x20, 0x52,
                0x6F, 0x6F, 0x74, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7,
                0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02,
                0x82, 0x01, 0x01, 0x00, 0xB5, 0x49, 0x67, 0x9F, 0x7E, 0xD7, 0x99, 0x50, 0x47, 0xA4, 0x14, 0x10,
                0xA4, 0x9E, 0x70, 0xA5, 0x1C, 0xB1, 0xB1, 0x68, 0x57, 0xAD, 0xFB, 0x7D, 0x86, 0x5D, 0x12, 0x48,
                0xF2, 0x42, 0x1A, 0x72, 0xE2, 0x71, 0xA1, 0x8B, 0x32, 0xF5, 0xF6, 0x07, 0x79, 0x14, 0x5F, 0x0F,
                0xF3, 0x76, 0x2F, 0x97, 0x1F, 0x8E, 0xAF, 0x03, 0x6B, 0x1E, 0x88, 0x94, 0x46, 0x23, 0x1A, 0xFD,
                0xF3, 0x88, 0x6F, 0x80, 0x26, 0xF7, 0x84, 0x37, 0x3B, 0xCA, 0x96, 0xAA, 0x32, 0x9A, 0xC2, 0x76,
                0x75, 0xFB, 0x24, 0x1E, 0xAE, 0xEC, 0x24, 0xF7, 0x28, 0x45, 0xCC, 0xBF, 0x4F, 0xD5, 0xBE, 0x05,
                0x39, 0x45, 0x42, 0xA0, 0x81, 0xD7, 0x95, 0x19, 0x26, 0xAD, 0x19, 0x42, 0xC8, 0x3E, 0x08, 0x07,
                0x93, 0x9F, 0xE5, 0x8A, 0xE3, 0x16, 0xB0, 0x6C, 0x27, 0x45, 0x43, 0xBC, 0x4A, 0xFE, 0xA3, 0x0B,
                0x96, 0xDE, 0x7E, 0xD2, 0x9F, 0xF9, 0x63, 0xA0, 0xA6, 0x15, 0x02, 0xE1, 0xC7, 0xF5, 0x8D, 0x77,
                0x80, 0x30, 0x05, 0xBE, 0x08, 0xB2, 0xED, 0x59, 0xFC, 0x6C, 0x89, 0x04, 0x0F, 0x09, 0x4F, 0x1E,
                0xB0, 0x04, 0xA5, 0x17, 0x3A, 0xD2, 0x24, 0xFB, 0xEE, 0x0B, 0x83, 0x1C, 0xF3, 0xF9, 0xB8, 0xDE,
                0xBB, 0x63, 0xA9, 0xBE, 0x0B, 0x66, 0x2F, 0x33, 0x91, 0x4D, 0xEE, 0xD1, 0x1C, 0xBE, 0x8E, 0x53,
                0x81, 0x54, 0xA4, 0xBA, 0xE7, 0xC4, 0xEC, 0x08, 0xFD, 0x03, 0xD8, 0x52, 0xAE, 0xA8, 0xEB, 0x1D,
                0x8E, 0xCC, 0x28, 0x7A, 0xC0, 0x99, 0x05, 0x09, 0x65, 0x56, 0x3B, 0xB4, 0x68, 0x0B, 0xE5, 0x91,
                0x89, 0xD2, 0x0C, 0x64, 0xF9, 0xEF, 0x56, 0x38, 0xB9, 0xD7, 0xC2, 0x43, 0x98, 0x5E, 0x52, 0xA1,
                0x6B, 0xF5, 0xB7, 0x49, 0xB7, 0x4C, 0xF1, 0xFB, 0x9D, 0x9E, 0x2F, 0x29, 0x4F, 0x20, 0x88, 0xF8,
                0x04, 0x1A, 0xF0, 0x19, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x53, 0x30, 0x51, 0x30, 0x1D, 0x06,
                0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0xBD, 0x4C, 0x35, 0x35, 0xA0, 0xF1, 0x4A, 0x49,
                0xBE, 0x3A, 0x64, 0x9B, 0x4A, 0x6D, 0xFA, 0xF5, 0x77, 0x4C, 0xD4, 0x34, 0x30, 0x1F, 0x06, 0x03,
                0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xBD, 0x4C, 0x35, 0x35, 0xA0, 0xF1, 0x4A,
                0x49, 0xBE, 0x3A, 0x64, 0x9B, 0x4A, 0x6D, 0xFA, 0xF5, 0x77, 0x4C, 0xD4, 0x34, 0x30, 0x0F, 0x06,
                0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x0D,
                0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01,
                0x01, 0x00, 0x0C, 0x0B, 0x5A, 0xC5, 0xCE, 0xE4, 0xC4, 0x05, 0x3A, 0xEF, 0xA0, 0x46, 0x11, 0xA3,
                0x5B, 0x36, 0xB6, 0xF0, 0x9C, 0x7F, 0xB5, 0xC0, 0x51, 0x3B, 0xF0, 0x1E, 0x61, 0xC5, 0x51, 0xB2,
                0xDC, 0x17, 0x2F, 0xA7, 0xCD, 0xD7, 0x40, 0x77, 0xFE, 0x40, 0xD5, 0x50, 0x81, 0x0F, 0x11, 0xD1,
                0xB7, 0xEF, 0xF5, 0xD0, 0x03, 0x21, 0x47, 0x3B, 0x9E, 0xB6, 0x91, 0x5E, 0x85, 0x0A, 0x5D, 0x0E,
                0x46, 0x72, 0x45, 0x1E, 0xC2, 0x49, 0x51, 0xC3, 0x28, 0xCE, 0x2C, 0x93, 0x14, 0x37, 0xB4, 0x54,
                0xEE, 0x55, 0x97, 0x59, 0x74, 0xCD, 0xFB, 0x4F, 0x83, 0x03, 0x59, 0x53, 0xD2, 0xAE, 0xF5, 0xAB,
                0x2D, 0x8C, 0x59, 0x34, 0x47, 0xFA, 0x4E, 0x87, 0xAE, 0xCA, 0x1D, 0x6C, 0x8D, 0x02, 0xD1, 0x4B,
                0x2E, 0xF1, 0x93, 0x91, 0xAF, 0x13, 0x1F, 0x7B, 0xA6, 0x9B, 0x81, 0xC5, 0xFB, 0x49, 0x94, 0x42,
                0xBD, 0xD3, 0x85, 0x19, 0x3D, 0x73, 0xAB, 0xB3, 0x75, 0xCA, 0x37, 0x1F, 0xE8, 0x5E, 0xF7, 0xED,
                0xEF, 0xA8, 0x72, 0x12, 0xEC, 0x2C, 0x8A, 0x56, 0xAA, 0xA3, 0x78, 0x4A, 0x88, 0x00, 0x3A, 0xF3,
                0x63, 0x63, 0xC3, 0x02, 0x57, 0x0E, 0xD4, 0x8C, 0xDC, 0x58, 0x49, 0x09, 0x63, 0x65, 0xA1, 0xD9,
                0x7E, 0x50, 0xB5, 0xEA, 0x5E, 0xEA, 0xED, 0x10, 0x63, 0x5B, 0x57, 0x62, 0x4D, 0x80, 0xE9, 0x83,
                0x4E, 0xD4, 0xEE, 0xF3, 0xEB, 0x7E, 0x25, 0xBC, 0x8F, 0x6A, 0x63, 0xDE, 0x20, 0x55, 0x0B, 0x02,
                0xB4, 0xA8, 0x5C, 0x73, 0x16, 0x63, 0xA1, 0x2C, 0xF4, 0xA2, 0x8F, 0x13, 0x0A, 0xB3, 0x62, 0xE1,
                0x0E, 0x2E, 0x00, 0xDF, 0x57, 0x57, 0x71, 0xE1, 0x99, 0xE7, 0x11, 0xB3, 0xE6, 0xB0, 0x0D, 0x4B,
                0xDB, 0x0B, 0x22, 0x73, 0x9C, 0x98, 0x68, 0xE1, 0xFC, 0xDA, 0x5E, 0x8B, 0xB3, 0xDB, 0x28, 0x2A,
                0x69, 0x00
            };
            byte[] keyData = new byte[] {
                0x01, 0x81, 0x80,
                0xdf, 0x4d, 0x54, 0xdb, 0x53, 0x94, 0xe6, 0x62, 0x1b, 0xfb, 0xe7, 0x92, 0xe9, 0x5c, 0x57, 0xa1,
                0xfb, 0xe9, 0x52, 0xb3, 0xba, 0x7b, 0x57, 0x9c, 0x03, 0xb4, 0xa5, 0x80, 0xe6, 0xe5, 0xbb, 0x9a,
                0x61, 0x54, 0x24, 0x49, 0xd3, 0x26, 0x76, 0xd9, 0xde, 0xae, 0x1b, 0xd7, 0x1f, 0x4b, 0x5a, 0x13,
                0x81, 0xf8, 0x8d, 0x28, 0x39, 0x35, 0xb6, 0x37, 0x70, 0xc3, 0x09, 0x54, 0xbd, 0x4b, 0xbd, 0x9e,
                0xa8, 0x78, 0x31, 0x25, 0x22, 0xb5, 0x54, 0xdc, 0xab, 0x5b, 0xa6, 0x70, 0xd3, 0x3a, 0x79, 0xae,
                0x3b, 0x67, 0x22, 0x0d, 0x64, 0xc6, 0x05, 0x1f, 0x04, 0x30, 0x8c, 0x27, 0xc1, 0x73, 0x2c, 0x9a,
                0x74, 0xeb, 0x50, 0x28, 0xb9, 0x55, 0xa0, 0xed, 0xba, 0x17, 0x8b, 0x8c, 0x4b, 0x21, 0xce, 0x04,
                0x61, 0xa9, 0x62, 0x84, 0xa8, 0x05, 0x01, 0xed, 0x69, 0x67, 0xa0, 0xbe, 0xc8, 0xe9, 0x08, 0x13,
                0x02, 0x81, 0x80,
                0xcf, 0xd5, 0x17, 0xb1, 0x3c, 0x65, 0x10, 0xb9, 0x02, 0xc8, 0x0b, 0xd8, 0xfb, 0xb3, 0x2d, 0xec,
                0x5c, 0x33, 0x24, 0x50, 0xd6, 0x0f, 0x13, 0xb4, 0x31, 0xcb, 0x41, 0xfc, 0x7c, 0x60, 0xbf, 0x2a,
                0x62, 0x81, 0x57, 0x54, 0xcd, 0x07, 0xe8, 0x9b, 0x46, 0x7d, 0x74, 0x97, 0x30, 0x45, 0x65, 0x93,
                0x9a, 0x78, 0x94, 0x45, 0xd1, 0xbc, 0x65, 0xae, 0x5e, 0xc7, 0xa0, 0x87, 0x89, 0xf0, 0xdc, 0x46,
                0x22, 0x77, 0xa0, 0x39, 0xd3, 0x80, 0x51, 0x23, 0x19, 0x51, 0x9c, 0x4f, 0x78, 0x30, 0x8a, 0x85,
                0x9c, 0x76, 0xee, 0xbd, 0xc9, 0xd5, 0x9b, 0x0d, 0x77, 0xd1, 0xa5, 0xa1, 0x85, 0x07, 0x39, 0x99,
                0x5e, 0x19, 0x3d, 0x4c, 0x98, 0xe8, 0x10, 0x6a, 0x71, 0x93, 0x6a, 0x8a, 0x29, 0xdc, 0xbe, 0x45,
                0xf2, 0x79, 0x3c, 0x86, 0x63, 0x50, 0x99, 0xfa, 0xc9, 0x96, 0x9b, 0x13, 0x66, 0x4b, 0x84, 0xa3,
                0x03, 0x81, 0x80,
                0x20, 0xa5, 0x20, 0x8b, 0xb3, 0xeb, 0x67, 0xc6, 0xde, 0x0a, 0x74, 0xaf, 0x60, 0x98, 0x54, 0x63,
                0x64, 0xfd, 0x96, 0x4e, 0x9a, 0x2b, 0xa0, 0x02, 0x39, 0xf4, 0x75, 0xe1, 0xa3, 0x5f, 0xe0, 0x8e,
                0x50, 0x3e, 0x49, 0xd3, 0xd5, 0x1f, 0xa1, 0x6e, 0x76, 0x84, 0x83, 0xa3, 0x6e, 0x7a, 0xc8, 0x9f,
                0x63, 0x77, 0xdf, 0xc3, 0x0a, 0xa2, 0x14, 0x92, 0x84, 0x54, 0xaf, 0x0f, 0x89, 0x61, 0x02, 0x46,
                0xa8, 0xa0, 0x71, 0xa6, 0xd9, 0x2d, 0x23, 0x4b, 0xe3, 0x6d, 0x51, 0xa6, 0xda, 0xea, 0x88, 0x91,
                0x75, 0x33, 0xbd, 0xa1, 0xb1, 0xa2, 0xd5, 0x6a, 0xd4, 0x64, 0xf8, 0x88, 0x73, 0x5a, 0x90, 0x21,
                0xc0, 0x88, 0x0a, 0x3e, 0xf9, 0xe1, 0x4f, 0xd6, 0x91, 0x47, 0x11, 0xea, 0x9f, 0xad, 0x40, 0x7e,
                0x19, 0x7c, 0xf6, 0xdf, 0x27, 0xe5, 0x1b, 0x84, 0x06, 0xcd, 0xd4, 0x8d, 0x2f, 0xb8, 0x09, 0xab,
                0x04, 0x81, 0x80,
                0x39, 0xdb, 0xe4, 0x25, 0xa6, 0x5f, 0xa8, 0x81, 0x29, 0x22, 0x12, 0x12, 0x4d, 0x38, 0x3b, 0xcf,
                0xb2, 0x77, 0x56, 0x63, 0xde, 0xc4, 0x01, 0xc3, 0x47, 0x9d, 0x83, 0x78, 0x4c, 0x14, 0x0f, 0x04,
                0x38, 0xba, 0x33, 0x5a, 0xdb, 0x5d, 0x99, 0x47, 0x29, 0x1f, 0xa2, 0x06, 0xb9, 0x1c, 0x88, 0xc3,
                0xc7, 0xdc, 0x4b, 0xc3, 0x08, 0x39, 0xbf, 0xc1, 0x04, 0x87, 0xe4, 0xcb, 0xf6, 0xfe, 0x04, 0x04,
                0xce, 0x71, 0xa9, 0x3c, 0x90, 0x02, 0x08, 0x14, 0x92, 0x66, 0xe2, 0xf2, 0x48, 0xce, 0x92, 0xb1,
                0xd1, 0xb6, 0x56, 0x8e, 0xa5, 0x92, 0xff, 0x00, 0x87, 0xdb, 0xe8, 0x95, 0x87, 0xd8, 0x54, 0x13,
                0xbb, 0x5b, 0xa1, 0x72, 0x22, 0x9b, 0x70, 0x7e, 0x81, 0xb1, 0xfd, 0x96, 0x0b, 0x43, 0x76, 0x01,
                0x39, 0x18, 0xc1, 0x5d, 0xd4, 0x66, 0x4b, 0x07, 0xc3, 0x79, 0x57, 0x20, 0xd6, 0x78, 0xad, 0xab,
                0x05, 0x81, 0x80,
                0x34, 0x37, 0x0c, 0xd6, 0x70, 0x8b, 0x2b, 0x0d, 0xc8, 0x2a, 0xdc, 0x4e, 0x66, 0xdb, 0x99, 0xa5,
                0x49, 0x99, 0xf6, 0xe9, 0x59, 0x7b, 0xff, 0x6b, 0x1e, 0x86, 0x76, 0x0c, 0xc1, 0xbc, 0x6d, 0x68,
                0xcc, 0x93, 0x4a, 0xb3, 0xb6, 0xdc, 0xb3, 0xf4, 0x93, 0x2c, 0x7e, 0xe4, 0xaa, 0x11, 0x6b, 0x96,
                0xcc, 0x54, 0xdf, 0x86, 0xe7, 0xa3, 0x3c, 0x0f, 0x0c, 0x90, 0x6b, 0xd1, 0x3f, 0xe8, 0xba, 0x40,
                0x28, 0xed, 0x9e, 0xe5, 0xe0, 0xd3, 0x0a, 0x04, 0x90, 0x9a, 0x1d, 0xc4, 0x2d, 0x13, 0xf8, 0xa1,
                0x25, 0xd4, 0xf2, 0x9e, 0x14, 0x43, 0xf7, 0x6b, 0x8c, 0x41, 0x6d, 0xb0, 0x32, 0x0d, 0xe6, 0x21,
                0x84, 0x61, 0x50, 0xf4, 0xbf, 0x72, 0x9c, 0x0a, 0xbf, 0x02, 0x03, 0x66, 0x21, 0xec, 0xc6, 0xd9,
                0xcc, 0x7e, 0x15, 0xb1, 0xc5, 0x00, 0x84, 0x8d, 0xe3, 0x42, 0x0c, 0xf5, 0xd2, 0x82, 0x71, 0x70
            };

            cert = new X509Certificate2(certDer);
            privateKey = PivPrivateKey.Create(keyData);

            return true;
        }

        // Return the PEM of a private key and a certificate for that key.
        // The algorithm arg specifies the algorithm of the private key and the
        // subject public key. For all the certs in this method, the signing
        // algorithm (the algorithm used by the entity that signed the cert) is
        // RSA (2048-bit key) with SHA-256.
        // If the validAttest arg is true, the cert will be version 3  and
        // contain the extension BasicConstraints (it will be a CA cert). If
        // false, the cert will be version 1 (no extensions) and will be a leaf
        // cert. Note that a 1024-bit key is not allowed to be an attestation
        // key, so the key and cert returned will be invalid for attestation no
        // matter what (but it will be god for a negative test).
        // These keys and certs can be used for anything, they don't have to be
        // used in attestation. That is, if you are not dealing with attestation,
        // and you need a key and cert, these might work.
        public static bool GetKeyAndCertPem(PivAlgorithm algorithm, bool validAttest, out string cert, out string privateKey)
        {
            switch (algorithm)
            {
                default:
                    cert = "nocert";
                    privateKey = "nokey";
                    return false;

                case PivAlgorithm.Rsa1024:
                    if (validAttest == true)
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIIC2zCCAcOgAwIBAgICBRcwDQYJKoZIhvcNAQELBQAwZDELMAkGA1UEBhMCVVMx\n" +
                            "CzAJBgNVBAgMAkNBMRcwFQYDVQQHDA5QYWxvIEFsdG8gUm9vdDESMBAGA1UECgwJ\n" +
                            "RmFrZSBSb290MRswGQYDVQQDDBJGYWtlIFJvb3QgUlNBIDIwNDgwHhcNMjEwNDE2\n" +
                            "MTc0MjEwWhcNMzEwNDA0MTc0MjEwWjBpMQswCQYDVQQGEwJVUzELMAkGA1UECAwC\n" +
                            "Q0ExEjAQBgNVBAcMCVBhbG8gQWx0bzEZMBcGA1UECgwQRmFrZSBBdHRlc3RhdGlv\n" +
                            "bjEeMBwGA1UEAwwVRmFrZSBBdHRlc3RhdGlvbiAxMDI0MIGfMA0GCSqGSIb3DQEB\n" +
                            "AQUAA4GNADCBiQKBgQCxv2vOcMt+rn+EZsKSP5UlIuG3LnhiWKHaVEvfQJwXiOhx\n" +
                            "RCtowX9J4ij14ZB5zvwrmoxfMn2uu4ZB8QvuztdNiSKZKenqx5uqV4ki9gns1rem\n" +
                            "cuwGo/C2GvDY/Bpd4pDgWzARvc3QPMVVKic2JCRb5/pSUkvURwGtOC+51NPIrwID\n" +
                            "AQABoxYwFDASBgNVHRMBAf8ECDAGAQH/AgEBMA0GCSqGSIb3DQEBCwUAA4IBAQCr\n" +
                            "L3VVxhYuGTyviLmcKxhIrQWRZgBfp+09bWtpoAjwYUGLjhaUpzh89N6ySUrNRPpT\n" +
                            "vnN4aNwEPao6QafED1DLOreJSEbKeVAG0/NXT1LSioibmOBgqN9t9Kv4GqQjelgV\n" +
                            "GNx1iZk2jLVqGPocpmoZbDXkIfaLB39Opm7yJyFKL5A6sTInTmysOagSO/zTI/3N\n" +
                            "etoTT7KdwM99x6etAz+u8GAJqJ3Tdmp0RKWxM6V5FNXXRoDa1TxPLAzxOr1S5Bpb\n" +
                            "Mdn3bhcKLsW0duJsKKVEFViQpqGJhvjEVZW0n2HXG+axvASArt6ADn5tZf/T4MQs\n" +
                            "i0C0Pk5RDjcbuRYxqWJF\n" +
                            "-----END CERTIFICATE-----";
                    }
                    else
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIICvjCCAaYCAgUWMA0GCSqGSIb3DQEBCwUAMGQxCzAJBgNVBAYTAlVTMQswCQYD\n" +
                            "VQQIDAJDQTEXMBUGA1UEBwwOUGFsbyBBbHRvIFJvb3QxEjAQBgNVBAoMCUZha2Ug\n" +
                            "Um9vdDEbMBkGA1UEAwwSRmFrZSBSb290IFJTQSAyMDQ4MB4XDTIxMDQxNjE3NDIx\n" +
                            "MFoXDTMxMDQwNDE3NDIxMFowaTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRIw\n" +
                            "EAYDVQQHDAlQYWxvIEFsdG8xGTAXBgNVBAoMEEZha2UgQXR0ZXN0YXRpb24xHjAc\n" +
                            "BgNVBAMMFUZha2UgQXR0ZXN0YXRpb24gMTAyNDCBnzANBgkqhkiG9w0BAQEFAAOB\n" +
                            "jQAwgYkCgYEAsb9rznDLfq5/hGbCkj+VJSLhty54Ylih2lRL30CcF4jocUQraMF/\n" +
                            "SeIo9eGQec78K5qMXzJ9rruGQfEL7s7XTYkimSnp6sebqleJIvYJ7Na3pnLsBqPw\n" +
                            "thrw2PwaXeKQ4FswEb3N0DzFVSonNiQkW+f6UlJL1EcBrTgvudTTyK8CAwEAATAN\n" +
                            "BgkqhkiG9w0BAQsFAAOCAQEAX/rUsC0iFk4jn94/KNAuvRNDRe9zdwM9zmzaGjBh\n" +
                            "d/mCi85F+VhxwMkQa32IaMwIH2nHy2Sdt8+O3EulXjOkbSclilmmws7yR38fFIV2\n" +
                            "S1/zbYgrevd+DYyZ6VDb4iFcScJGQ/W257NagK9JCuC1k7cWwcRfOSxnbnv8SzAa\n" +
                            "WRzzLeMj7wvJDx64yccj7a3Ap89AZ3VHVaUyTD5N5IqkksElHxx7KrdqjvtvzBpw\n" +
                            "gHyn4hFRvSuWOio6lklE/1hgDtJ+FbR1aGMZBz4D5YseKjYQ8dYhJE5L5bgklhUi\n" +
                            "BRl88HhQ1aHTDbx3b8ahshSdbhG6JLmGfZBdp18XPljnwQ==\n" +
                            "-----END CERTIFICATE-----";
                    }
                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALG/a85wy36uf4Rm\n" +
                        "wpI/lSUi4bcueGJYodpUS99AnBeI6HFEK2jBf0niKPXhkHnO/CuajF8yfa67hkHx\n" +
                        "C+7O102JIpkp6erHm6pXiSL2CezWt6Zy7Aaj8LYa8Nj8Gl3ikOBbMBG9zdA8xVUq\n" +
                        "JzYkJFvn+lJSS9RHAa04L7nU08ivAgMBAAECgYBxAADJfWvhXY4z3iBUWZe3xDU6\n" +
                        "/5AI9c/vvSd/BtQ1IhSj7XKrZlhF4EGqD3yJ88zc66PR4YeFTjJMObIcX+L/l0Ki\n" +
                        "Yx+OyjthW7b9pVEjrUBc1Cbj26r8PzRCEM41zZy6jLB6M1Oi71hRYU6ZaetBnp2T\n" +
                        "U2A5yUWoF2YT9VMSAQJBAOyEDRayskWsv9FIb9j0p42fLnhfMp4oUMvAQBQfRPEl\n" +
                        "0wgbPHG2KHKeZCkpEkn1D6VFu8JAVkXNaz77Op9LiV0CQQDAY/5Gt+Wrjekz6myM\n" +
                        "rDhRhoOmX6eSFCTzqOvZVLc/jy4aMLYC3VGmyiHOEXD5ONyE+LSKnbJxrK3vriKh\n" +
                        "Cl17AkEA2KNXzcueaR2DkXHVKRdnhdwhV5ZzKdTptMeCqiu+HVg1BT7VTZ65S8tz\n" +
                        "GRSKsP1r+El4YsRFgahXrJe3qYMp7QJBAL+TEoGC3y0sG3p5xWtyloX/xxolh+w7\n" +
                        "KOyEWY3JAMxGm+ayeJtznLnT70OONIvGpje2m7in/SeahnzzTkJD2v8CQHWezzo3\n" +
                        "m6NRXXDkbY7cLTnkk9zkQwkOjZO+/ChlQ6trrJ7UAKGL5Gj8x3gXbBrbU5mv7xL/\n" +
                        "Py1ySQ4xSMT/gB0=\n" +
                        "-----END PRIVATE KEY-----";

                    break;

                case PivAlgorithm.Rsa2048:
                    if (validAttest == true)
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIIDXzCCAkegAwIBAgICBRkwDQYJKoZIhvcNAQELBQAwZDELMAkGA1UEBhMCVVMx\n" +
                            "CzAJBgNVBAgMAkNBMRcwFQYDVQQHDA5QYWxvIEFsdG8gUm9vdDESMBAGA1UECgwJ\n" +
                            "RmFrZSBSb290MRswGQYDVQQDDBJGYWtlIFJvb3QgUlNBIDIwNDgwHhcNMjEwNDE2\n" +
                            "MTc0MjE1WhcNMzEwNDA0MTc0MjE1WjBpMQswCQYDVQQGEwJVUzELMAkGA1UECAwC\n" +
                            "Q0ExEjAQBgNVBAcMCVBhbG8gQWx0bzEZMBcGA1UECgwQRmFrZSBBdHRlc3RhdGlv\n" +
                            "bjEeMBwGA1UEAwwVRmFrZSBBdHRlc3RhdGlvbiAyMDQ4MIIBIjANBgkqhkiG9w0B\n" +
                            "AQEFAAOCAQ8AMIIBCgKCAQEA239gOKe2rLurJ/QH5OAfJnGdQJCamKeVQX+gNsUV\n" +
                            "xLA8Q/6gX/HE4XmhOgeqC9M0s/S34Lm/1/wPnvDLHDGyAw5vvWmsRXaNgFEKj2eR\n" +
                            "dPK8Uayw05MoocGHFHIheCjvtuAeRnuVd7Ok6SpcrvCAXgx9DY2e3bEP5KyVZRnc\n" +
                            "BUh1pt2tQIuMiTM3ofCKuYC+tON77Q/QNm0MzOJFFsPUIcCf5jIvS0f2C8U91AAg\n" +
                            "bylKq1RWOXcYnHEbD/e3kevD+e6KLHka46a0Nxpf9SC8PVvlTqqV7LqgNJcxXtGo\n" +
                            "OeiFLnx9evLmtngsx8nndLLoG7iMeslg+XbkuE8z/6wkgQIDAQABoxYwFDASBgNV\n" +
                            "HRMBAf8ECDAGAQH/AgEBMA0GCSqGSIb3DQEBCwUAA4IBAQBkJB6CYu/+2NQbnQ69\n" +
                            "B2XXaR6AXxyL8XVB/d91Ei4ZViloFUZY4jpJ7yAEN+U6R824V/WWDMGhoIgm5u1L\n" +
                            "qTfi+Uqc6lTHNxWEP4B7nH1VOgh8ego9anenkTWtr6m+RTwJF3TpfIuZTJPkdU3Z\n" +
                            "eFyv3OQ9TWLxwGQOqT1Mx8km/xM18PawCcrYXX3AHddYUBtdPEAVfDakWn6coL1+\n" +
                            "oXKVHI79VrTGOKx1W0ZQefwlz7OaJn3JaBlJzUys/dXwpqnbRogiZoHLSK3uEMga\n" +
                            "JkKe+c+ul+dWtd3ykTWaciknQILyFwNu+MbEYOATl4BGR+/gOrw5hmAsfdV3bde0\n" +
                            "R9WM\n" +
                            "-----END CERTIFICATE-----";
                    }
                    else
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIIDQjCCAioCAgUYMA0GCSqGSIb3DQEBCwUAMGQxCzAJBgNVBAYTAlVTMQswCQYD\n" +
                            "VQQIDAJDQTEXMBUGA1UEBwwOUGFsbyBBbHRvIFJvb3QxEjAQBgNVBAoMCUZha2Ug\n" +
                            "Um9vdDEbMBkGA1UEAwwSRmFrZSBSb290IFJTQSAyMDQ4MB4XDTIxMDQxNjE3NDIx\n" +
                            "NVoXDTMxMDQwNDE3NDIxNVowaTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRIw\n" +
                            "EAYDVQQHDAlQYWxvIEFsdG8xGTAXBgNVBAoMEEZha2UgQXR0ZXN0YXRpb24xHjAc\n" +
                            "BgNVBAMMFUZha2UgQXR0ZXN0YXRpb24gMjA0ODCCASIwDQYJKoZIhvcNAQEBBQAD\n" +
                            "ggEPADCCAQoCggEBANt/YDintqy7qyf0B+TgHyZxnUCQmpinlUF/oDbFFcSwPEP+\n" +
                            "oF/xxOF5oToHqgvTNLP0t+C5v9f8D57wyxwxsgMOb71prEV2jYBRCo9nkXTyvFGs\n" +
                            "sNOTKKHBhxRyIXgo77bgHkZ7lXezpOkqXK7wgF4MfQ2Nnt2xD+SslWUZ3AVIdabd\n" +
                            "rUCLjIkzN6HwirmAvrTje+0P0DZtDMziRRbD1CHAn+YyL0tH9gvFPdQAIG8pSqtU\n" +
                            "Vjl3GJxxGw/3t5Hrw/nuiix5GuOmtDcaX/UgvD1b5U6qley6oDSXMV7RqDnohS58\n" +
                            "fXry5rZ4LMfJ53Sy6Bu4jHrJYPl25LhPM/+sJIECAwEAATANBgkqhkiG9w0BAQsF\n" +
                            "AAOCAQEAZZwTv0VapJd4Wbcdr3fI/sarBVw6NTrqcK85LdkGF8Nyh+RwNjwYoCjM\n" +
                            "0x7PQ4w6CDzHsoy5LgHVh2i6EDrwKWTuJEQjxzKmzbGy5CVC6WenlQRs54GSkAiK\n" +
                            "t6S38Z93mlotFD3bQ6aRC70yRZhm392dD3TJoJ04I6ut9h1C3/AVPEAD+S7DBa+j\n" +
                            "HOLCfWP3fsFcf0vtKLbGnwz/OJdVVk8qW2SRbue7fYEqnC/10oYin2pAi7QMunFJ\n" +
                            "l8YdWAD7z59wslyIzXi5WivlB592+P78xFNl/QS00nKzO9eXv3/HM006Vb9BLmK0\n" +
                            "WvIT54DcVb+MwcRQvCyzgcWxekMtPg==\n" +
                            "-----END CERTIFICATE-----";
                    }
                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIIEwAIBADANBgkqhkiG9w0BAQEFAASCBKowggSmAgEAAoIBAQDbf2A4p7asu6sn\n" +
                        "9Afk4B8mcZ1AkJqYp5VBf6A2xRXEsDxD/qBf8cTheaE6B6oL0zSz9Lfgub/X/A+e\n" +
                        "8MscMbIDDm+9aaxFdo2AUQqPZ5F08rxRrLDTkyihwYcUciF4KO+24B5Ge5V3s6Tp\n" +
                        "Klyu8IBeDH0NjZ7dsQ/krJVlGdwFSHWm3a1Ai4yJMzeh8Iq5gL6043vtD9A2bQzM\n" +
                        "4kUWw9QhwJ/mMi9LR/YLxT3UACBvKUqrVFY5dxiccRsP97eR68P57ooseRrjprQ3\n" +
                        "Gl/1ILw9W+VOqpXsuqA0lzFe0ag56IUufH168ua2eCzHyed0sugbuIx6yWD5duS4\n" +
                        "TzP/rCSBAgMBAAECggEBAIRS/NoK2Yi2to8mgZ/MMVtGwQtMYbbHyKYs35RFKkNi\n" +
                        "D2LaXSqaIRvg7H6EYlIwqKQYUsXqlSoLLguelIPRvcQz7s8cpptVxiZmNNyRDlKX\n" +
                        "h0ohtpRGMgeaGOoNh/ndi+4OnJHXLRt1tGRQgoGAQZLxKm6CQxTZCoDMPmAtv8N6\n" +
                        "dobrCgF4dmDZ2bPjGszn/c51tjdN2l8JtgOxp6LD+cK0sdkQCctn8W+xJLhXrBcX\n" +
                        "JwJGqczX7cH9hvLRnCvTOJbRsb24b1YTPML4rQVkLzdtTWySCI5V6miWSl7q7HV/\n" +
                        "kyloRv2Eqos0erat6Z2tyVCvuJRo1y5m0qnpd/+JXZUCgYEA75LITbF4XoC1MLpA\n" +
                        "ZchbtUukHfjmiIUmiDX2QkopeyrCOEOwiDHMrq54/ZbIxwnePXHgyEhycDHyxki1\n" +
                        "l7XlVgmqg8gX0lHFc0P6bNKSEQMIp+aKF2ZFFqNKV3I4gZnLL4+5+52ddWPsk1Qd\n" +
                        "dVRdvbdtuzR6k0v2tGvd3jkRCvcCgYEA6ow0Nbrs5lJ2EQcbzB7Tpi/jJwAuKu/f\n" +
                        "rKS2Z1HtqhqH9I9O7o2QbCoCMZKiJgpYRpdpy7h3cGAAUvLp7nniLiQJDrwtNQLk\n" +
                        "arItdaoxLZyQhI8yEOBJ0lRbCq5ugbFN+NilJwQuSVM5uyNPcxgqdYGHFqF44LGQ\n" +
                        "OZ/XCC7uNkcCgYEA7RKunpuRRstNAgQ9d7tWbUiGBpbo4o4IvF/R6nVjKRv+CBmL\n" +
                        "1qqZJv9GgYO1+ajdQKaxTuDKRhZXbTpEYPXCFWsJTtEyKZF7t/28EfYqTyVWangr\n" +
                        "jM5KbgV2qqRAIJflRpKO89xcFe+lC4IAiLvM69FZiBh9d8eDQbVAYAjOwa8CgYEA\n" +
                        "xWCtQxYF7CEyyEuSIelDNRQRdS2arHlmYpPOCA6TEVX4WV8MDoZFJjEH3Y3HNHn6\n" +
                        "JZWf61dV89RmEWfoYs5g/3FFygejh3vimsNMrDtH3Vlm6JbUjA0jMoPYhZma1ztN\n" +
                        "IX+3I6lKBlyqNYiWgIWynWYeN3Y1Eel7NHMFcxaDUlsCgYEAvZ4e7yo9iz9gmtri\n" +
                        "hlD0QnuM/5MLdczSwtDeZuGnalOAWWPGWMPp+SJ7t2sU+Xe/ytVGDQWmc/tzKoGG\n" +
                        "rG7dSk9mkT4rod2gfKZdHdAsTQjvbx8lrezSgRHGYQF991Z4GTSTO2pe3r/LwhjP\n" +
                        "iZZjh4mwb45JukjeGimRP9H3aio=\n" +
                        "-----END PRIVATE KEY-----";

                    break;

                case PivAlgorithm.EccP256:
                    if (validAttest == true)
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIICkzCCAXugAwIBAgICBRMwDQYJKoZIhvcNAQELBQAwZDELMAkGA1UEBhMCVVMx\n" +
                            "CzAJBgNVBAgMAkNBMRcwFQYDVQQHDA5QYWxvIEFsdG8gUm9vdDESMBAGA1UECgwJ\n" +
                            "RmFrZSBSb290MRswGQYDVQQDDBJGYWtlIFJvb3QgUlNBIDIwNDgwHhcNMjEwNDE2\n" +
                            "MTc0MTQ0WhcNMzEwNDA0MTc0MTQ0WjBoMQswCQYDVQQGEwJVUzELMAkGA1UECAwC\n" +
                            "Q0ExEjAQBgNVBAcMCVBhbG8gQWx0bzEZMBcGA1UECgwQRmFrZSBBdHRlc3RhdGlv\n" +
                            "bjEdMBsGA1UEAwwURmFrZSBBdHRlc3RhdGlvbiAyNTYwWTATBgcqhkjOPQIBBggq\n" +
                            "hkjOPQMBBwNCAASATc5kxXt5D5v6oVIN1DlMJD2mCDb13GZQZfzujCFsEeBT5GuU\n" +
                            "13leL+p9yOXSoPXIm4zS+Dmbg2OpPfPHqrT5oxYwFDASBgNVHRMBAf8ECDAGAQH/\n" +
                            "AgEBMA0GCSqGSIb3DQEBCwUAA4IBAQBn/qQj/dQpK1lddIwV1BI8kOoZ15qyZwmd\n" +
                            "KczLLApYzRFzTdfOYXpxxG8ze+b8VuPPml10urFO22LQSL2FAMLqRn5sbsoIVWqu\n" +
                            "/A6TleqKj0OB8jLCEJd/KJB0HnVLQPY6LnSEvpkUXAzar+ltujyTTZl8K4gahbjs\n" +
                            "ghZG7cD2QnY0Awy95dpIn+6jNM9GU/Fvc5yuRbdkuF61X/GrV03YMokkpeW0NhCa\n" +
                            "UP/OXsi9JexE/mLV46HptVs/g8yoo7fyT8oXkoASlKf0pWVEsSzo2EL+HGb5Twfh\n" +
                            "ixWFfZ+FAdr3jWQa4aq1HA/lwQppVqSIJ0+jnkkbgTwRw8ve21BP\n" +
                            "-----END CERTIFICATE-----";
                    }
                    else
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIICdjCCAV4CAgUSMA0GCSqGSIb3DQEBCwUAMGQxCzAJBgNVBAYTAlVTMQswCQYD\n" +
                            "VQQIDAJDQTEXMBUGA1UEBwwOUGFsbyBBbHRvIFJvb3QxEjAQBgNVBAoMCUZha2Ug\n" +
                            "Um9vdDEbMBkGA1UEAwwSRmFrZSBSb290IFJTQSAyMDQ4MB4XDTIxMDQxNjE3NDE0\n" +
                            "NFoXDTMxMDQwNDE3NDE0NFowaDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRIw\n" +
                            "EAYDVQQHDAlQYWxvIEFsdG8xGTAXBgNVBAoMEEZha2UgQXR0ZXN0YXRpb24xHTAb\n" +
                            "BgNVBAMMFEZha2UgQXR0ZXN0YXRpb24gMjU2MFkwEwYHKoZIzj0CAQYIKoZIzj0D\n" +
                            "AQcDQgAEgE3OZMV7eQ+b+qFSDdQ5TCQ9pgg29dxmUGX87owhbBHgU+RrlNd5Xi/q\n" +
                            "fcjl0qD1yJuM0vg5m4NjqT3zx6q0+TANBgkqhkiG9w0BAQsFAAOCAQEAlzLV+ZSB\n" +
                            "ORU3s/qKA/uzC414Ilpe66BXAvc+trgJZk2FmUrhnvzr/JTCcgL5knjBlRsM2/CW\n" +
                            "oNAVqNvyQTzv5nHEVrNhWzTZNzvO54NWP7EMJ7d0tZVn0brEycnPu8MLGshS7Hgz\n" +
                            "gfWtLptAjJx6d7aJlDp5EupNZre51fViRuVKwB9f2dgvm9q2jtoMZ9+YdnCwzB/5\n" +
                            "NXjE/O7CTw53kelxKEY4AbWdMOhMG+WQtbYbe7Pk1KM9EWdiHNg7dX1jViD8ysVP\n" +
                            "9kblGWuh+OCNzurVvHtZQswIseNareOwVk13Mqk7Pq9zVrMi9Qn+rpjlSiTfop/W\n" +
                            "+eK+8+M1p6TEZA==\n" +
                            "-----END CERTIFICATE-----";
                    }

                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgIEdISnMgVtpVb28B\n" +
                        "8mxlrQ7eHtw8WbtvuV6BaK6jm/yhRANCAASATc5kxXt5D5v6oVIN1DlMJD2mCDb1\n" +
                        "3GZQZfzujCFsEeBT5GuU13leL+p9yOXSoPXIm4zS+Dmbg2OpPfPHqrT5\n" +
                        "-----END PRIVATE KEY-----";

                    break;

                case PivAlgorithm.EccP384:
                    if (validAttest == true)
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIICsDCCAZigAwIBAgICBRUwDQYJKoZIhvcNAQELBQAwZDELMAkGA1UEBhMCVVMx\n" +
                            "CzAJBgNVBAgMAkNBMRcwFQYDVQQHDA5QYWxvIEFsdG8gUm9vdDESMBAGA1UECgwJ\n" +
                            "RmFrZSBSb290MRswGQYDVQQDDBJGYWtlIFJvb3QgUlNBIDIwNDgwHhcNMjEwNDE2\n" +
                            "MTc0MjA1WhcNMzEwNDA0MTc0MjA1WjBoMQswCQYDVQQGEwJVUzELMAkGA1UECAwC\n" +
                            "Q0ExEjAQBgNVBAcMCVBhbG8gQWx0bzEZMBcGA1UECgwQRmFrZSBBdHRlc3RhdGlv\n" +
                            "bjEdMBsGA1UEAwwURmFrZSBBdHRlc3RhdGlvbiAzODQwdjAQBgcqhkjOPQIBBgUr\n" +
                            "gQQAIgNiAAQMJtrJS7oUVxb9ofXTeGWHRzDyz+DEzktNNP32w1lk4W1xJYR7R0Uj\n" +
                            "uhDiRkc7wC4e3UWN+wHUGLtodeuMLnnxvp40psR3k/SVUbCn6UP0QFF/JOTv9fGt\n" +
                            "qfccBGVNHt+jFjAUMBIGA1UdEwEB/wQIMAYBAf8CAQEwDQYJKoZIhvcNAQELBQAD\n" +
                            "ggEBAKoM0ZlWkh11NtpzL46F/JOYzBbptS+CJiEC4SAZwYDEZrW7zkGko8rBVO8q\n" +
                            "HpzRcNP88hW7YKHsrmTX3U3zJJZ96VxHT0R6zXMsZeOmkGT4tvjarGU2KJKKmN0Q\n" +
                            "aRdIqiUApTcvBVICXJPJeAmIClQZ1AdMWf0sijikh5eiq44PkuJNj6gCu0UzZguB\n" +
                            "Tio6GosI4lH58YviZi0WfyM19MS9MWLg3SGJniUwwI57+15Z5979IcUlC37UXLCY\n" +
                            "oBn8zsluxvYqdKlFbUhy1x6C2UT2YWOzkqpBHtcC1uNG/AnnnL695WASdIw+qmd4\n" +
                            "I5e05u1HmEVWQGbtX+DXtkrEGgw=\n" +
                            "-----END CERTIFICATE-----";
                    }
                    else
                    {
                        cert =
                            "-----BEGIN CERTIFICATE-----\n" +
                            "MIICkzCCAXsCAgUUMA0GCSqGSIb3DQEBCwUAMGQxCzAJBgNVBAYTAlVTMQswCQYD\n" +
                            "VQQIDAJDQTEXMBUGA1UEBwwOUGFsbyBBbHRvIFJvb3QxEjAQBgNVBAoMCUZha2Ug\n" +
                            "Um9vdDEbMBkGA1UEAwwSRmFrZSBSb290IFJTQSAyMDQ4MB4XDTIxMDQxNjE3NDIw\n" +
                            "NVoXDTMxMDQwNDE3NDIwNVowaDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRIw\n" +
                            "EAYDVQQHDAlQYWxvIEFsdG8xGTAXBgNVBAoMEEZha2UgQXR0ZXN0YXRpb24xHTAb\n" +
                            "BgNVBAMMFEZha2UgQXR0ZXN0YXRpb24gMzg0MHYwEAYHKoZIzj0CAQYFK4EEACID\n" +
                            "YgAEDCbayUu6FFcW/aH103hlh0cw8s/gxM5LTTT99sNZZOFtcSWEe0dFI7oQ4kZH\n" +
                            "O8AuHt1FjfsB1Bi7aHXrjC558b6eNKbEd5P0lVGwp+lD9EBRfyTk7/Xxran3HARl\n" +
                            "TR7fMA0GCSqGSIb3DQEBCwUAA4IBAQAvioQty65EJejEJjxY4u4poMsEKC++HTzF\n" +
                            "RcLB0zkWxcO4oxzDW11gogjAslA4QSfop79P33ln4uZ3aDHczEhguFcnJQ9Takwn\n" +
                            "FQsXHOHCL2HupDyaQMznjPZrJYcv9jTUtSJ7IVQP8xYnN2eKi9vB5FeKL1UphM/B\n" +
                            "FMUqrIsZIcL+sCi0Be1skAj82/+C+ny9GOEriMRkMN/WoAscuNIIP/E2JX1kCJbw\n" +
                            "uJMBWPe8kGuzUsJ+iblLvTOd2dwDu5EtTJcESW+2zzwwSW1O41aS36ARrct/A3rQ\n" +
                            "e510vuxfCvR7kt74bSuKi3wxsCTLtMEfIh51k3xZsa4FoLO8mm4v\n" +
                            "-----END CERTIFICATE-----";
                    }
                    privateKey =
                        "-----BEGIN PRIVATE KEY-----\n" +
                        "MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAKroxlCShQ6sz89gMc\n" +
                        "K09DIyI8kxaRZt9GlCMmbbmVpGhqhQLvwVdowQkA0xQ9A3+hZANiAAQMJtrJS7oU\n" +
                        "Vxb9ofXTeGWHRzDyz+DEzktNNP32w1lk4W1xJYR7R0UjuhDiRkc7wC4e3UWN+wHU\n" +
                        "GLtodeuMLnnxvp40psR3k/SVUbCn6UP0QFF/JOTv9fGtqfccBGVNHt8=\n" +
                        "-----END PRIVATE KEY-----";

                    break;
            }

            return true;
        }
    }
}
