// Copyright 2021 Yubico AB
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using Xunit;
using Yubico.Core.Buffers;
using Yubico.Core.Iso7816;

namespace Yubico.YubiKey.U2f
{
    public class RegistrationDataTests
    {
        private const string certAndSigHex

        [SuppressMessage("Reliability", "CA2000:Dispose objects before losing scope", Justification = "<Pending>")]
        private static RegistrationData GetGoodRegistrationData()
        {
            var cert = new X509Certificate2(Hex.HexToBytes(certAndSigHex));
            return new RegistrationData(
                new ECPoint()
                {
                    X = Hex.HexToBytes("60232F14DB552AF4CC16D14E65678567C1376C51230E53AF2E969A8A72E9CC21"),
                    Y = Hex.HexToBytes("8F0E6025129CB8B1A7F2861370DD819F12222CF3C9A261C2DC23A664D0038178")
                },
                Hex.HexToBytes("0102030405060708"),
                cert,
                Hex.HexToBytes("3045022054C53FDD4076DB440A3922519A04EFC6B6EF9B8B38C3CC3B42F13BB72F8347DC0221009C55A5143BDC2B7312A6C1BB88A2B3E54985991465056B109F07771B4028D911")
            );
        }

        [Fact]
        public void Constructor_GivenIncorrectLengthUserPublicKey_ThrowsArgumentException()
        {
            _ = Assert.Throws<ArgumentException>(() => new RegistrationData(new ECPoint { X = new byte[45], Y = new byte[72] }, new byte[100], new X509Certificate2(), new byte[100]));
        }

        [Fact]
        public void Constructor_GivenGoodData_SetsUserPublicKeyCorrectly()
        {
            RegistrationData registrationData = GetGoodRegistrationData();

            Assert.Equal("60232F14DB552AF4CC16D14E65678567C1376C51230E53AF2E969A8A72E9CC21", Hex.BytesToHex(registrationData.UserPublicKey.X));
            Assert.Equal("8F0E6025129CB8B1A7F2861370DD819F12222CF3C9A261C2DC23A664D0038178", Hex.BytesToHex(registrationData.UserPublicKey.Y));
        }

        [Fact]
        public void Constructor_GivenGoodData_SetsKeyHandle()
        {
            RegistrationData registrationData = GetGoodRegistrationData();

            Assert.Equal("0102030405060708", Hex.BytesToHex(registrationData.KeyHandle.ToArray()));
        }

        [Fact]
        public void Constructor_GivenGoodData_SetsCertificate()
        {
            RegistrationData registrationData = GetGoodRegistrationData();

            Assert.Equal("308202B9308201A1A003020102020415124113300D06092A864886F70D01010B05003021311F301D06035504030C1659756269636F204649444F2050726576696577204341301E170D3139303231383132313330385A170D3230303231383132313330385A3079310B300906035504061302534531123010060355040A0C0959756269636F20414231223020060355040B0C1941757468656E74696361746F72204174746573746174696F6E3132303006035504030C2959756269636F205532462045452053657269616C2031313530313830333739323034343830323332333059301306072A8648CE3D020106082A8648CE3D03010703420004D4CFC033E28C28A842E2394828DC14BF3235CBFB309C062B3AB6A4020DF34B182C441151E46EEB0D59A403D4ADC155DEAC3031E2F50206B3ED9F08E5AAC5185DA36C306A302206092B0601040182C40A020415312E332E362E312E342E312E34313438322E312E373013060B2B0601040182E51C0201010404030205203021060B2B0601040182E51C01010404120410EE882879721C491397753DFCCE97072A300C0603551D130101FF04023000300D06092A864886F70D01010B050003820101004F9C37C312C1BAB573EA012F53B4EDCEC0515CCB490B852431EAC0305032AEB98F28F9A25DB55C9BB3F0FA38C640607D372FAD80D016B0F2F7AB818A52E97E68BDD932877BD143892FD0B11BCF772F1903F26EDC9335943FBC728FADDE736A5F17BAE034683989549072516C432587B5AA0F2E9A65F46C6F6F06C0E4FA60CDB4B67316D462CB2360B2B7669FF4BAF199DDC69CFA30FA1D53A61EF62E8314B24109FF4DF4984DC7F8DBB94A604C6997218E626C8E1949898F7F49621418ABAF09C74F013B4E9FB40BE177BC7D92E751D7B0E8DEC771796544247DC7694AEFB45324BDB53C94860723549702617540477827438032AE75DB0DA2D5C008310DFED0", Hex.BytesToHex(registrationData.AttestationCertificate.RawData));
        }

        [Fact]
        public void Constructor_GivenGoodData_SetsSignature()
        {
            RegistrationData registrationData = GetGoodRegistrationData();

            Assert.Equal("3045022054C53FDD4076DB440A3922519A04EFC6B6EF9B8B38C3CC3B42F13BB72F8347DC0221009C55A5143BDC2B7312A6C1BB88A2B3E54985991465056B109F07771B4028D911", Hex.BytesToHex(registrationData.Signature.ToArray()));
        }

        [Fact]
        public void IsSignatureValid_GivenBadClientDataHash_ThrowsArgumentException()
        {
            RegistrationData registrationData = GetGoodRegistrationData();

            _ = Assert.Throws<ArgumentException>(() => registrationData.IsSignatureValid(new byte[10], new byte[32]));
        }

        [Fact]
        public void IsSignatureValid_GivenBadAppId_ThrowsArgumentException()
        {
            RegistrationData registrationData = GetGoodRegistrationData();

            _ = Assert.Throws<ArgumentException>(() => registrationData.IsSignatureValid(new byte[32], new byte[10]));
        }

        [Fact]
        public void IsSignatureValid_GivenCorrectData_ReturnsTrue()
        {
            byte[] clientDataHash = Hex.HexToBytes("A76CF9A4BDA5D0596D56612E71CDD954C38168954541522F7DCD9433666BA0F0");
            byte[] appId = Hex.HexToBytes("08D71B87CC11BF231245CC8C0A1B653FB5A47C2D9D66A8B94154AAB26C2FF670");

            using var cert = new X509Certificate2(Hex.HexToBytes

            var registrationData = new RegistrationData(
                new ECPoint()
                {
                    X = Hex.HexToBytes("71223BCF4C0EA04F3A8D87A41E8DD976DC066D95CBA2F72C854BE420A6F57FA8"),
                    Y = Hex.HexToBytes("C6CAADAF030FE1B01F74E19F40726B309582C5609A79BA2BDEE867555B7D35D2")
                },
                Hex.HexToBytes("EC83D625CB1BF099A167234F79C4F58E3DAD8DF4569CE87C961B37EB02145B4B14C3850296C295BBF6B1EEB057A6E905A8347AA5D9F87E3990611038235081BE"),
                cert,
                Hex.HexToBytes("3045022041F99B6316E03F4C6541C1C917A52C316C66233EB0C23614D1B83C8CF097DCFA022100B4133CCED9FD16ED229FA65B7CA833FE2F2981A7F195A13BFDDA00891DD049A3")
            );

            Assert.True(registrationData.IsSignatureValid(clientDataHash, appId));
        }

        [Fact]
        public void IsSignatureValid_GivenIncorrectData_ReturnsFalse()
        {
            byte[] clientDataHash = new byte[32];
            byte[] appId = Hex.HexToBytes("08D71B87CC11BF231245CC8C0A1B653FB5A47C2D9D66A8B94154AAB26C2FF670");

            using var cert = new X509Certificate2(Hex.HexToBytes

            var registrationData = new RegistrationData(
                new ECPoint()
                {
                    X = Hex.HexToBytes("71223BCF4C0EA04F3A8D87A41E8DD976DC066D95CBA2F72C854BE420A6F57FA8"),
                    Y = Hex.HexToBytes("C6CAADAF030FE1B01F74E19F40726B309582C5609A79BA2BDEE867555B7D35D2")
                },
                Hex.HexToBytes("EC83D625CB1BF099A167234F79C4F58E3DAD8DF4569CE87C961B37EB02145B4B14C3850296C295BBF6B1EEB057A6E905A8347AA5D9F87E3990611038235081BE"),
                cert,
                Hex.HexToBytes("3045022041F99B6316E03F4C6541C1C917A52C316C66233EB0C23614D1B83C8CF097DCFA022100B4133CCED9FD16ED229FA65B7CA833FE2F2981A7F195A13BFDDA00891DD049A3")
            );

            Assert.False(registrationData.IsSignatureValid(clientDataHash, appId));
        }

        [Theory]
        [InlineData("3045022041F99B6316E03F4C6541C1C917A52C316C66233EB0C23614D1B83C8CF097DCFA022100B4133CCED9FD16ED229FA65B7CA833FE2F2981A7F195A13BFDDA00891DD049A3")]
        [InlineData("304602210041F99B6316E03F4C6541C1C917A52C316C66233EB0C23614D1B83C8CF097DCFA022100B4133CCED9FD16ED229FA65B7CA833FE2F2981A7F195A13BFDDA00891DD049A3")]
        [InlineData("3044022041F99B6316E03F4C6541C1C917A52C316C66233EB0C23614D1B83C8CF097DCFA0220B4133CCED9FD16ED229FA65B7CA833FE2F2981A7F195A13BFDDA00891DD049A3")]
        public void ConvertDerToIeeeP1393_GivenDer_CorrectlyProducesIeeeP1393AndSignatureVerifies(string derHex)
        {
            byte[] clientDataHash = Hex.HexToBytes("A76CF9A4BDA5D0596D56612E71CDD954C38168954541522F7DCD9433666BA0F0");
            byte[] appId = Hex.HexToBytes("08D71B87CC11BF231245CC8C0A1B653FB5A47C2D9D66A8B94154AAB26C2FF670");

            using var cert = new X509Certificate2(Hex.HexToBytes

            var registrationData = new RegistrationData(
                new ECPoint()
                {
                    X = Hex.HexToBytes("71223BCF4C0EA04F3A8D87A41E8DD976DC066D95CBA2F72C854BE420A6F57FA8"),
                    Y = Hex.HexToBytes("C6CAADAF030FE1B01F74E19F40726B309582C5609A79BA2BDEE867555B7D35D2")
                },
                Hex.HexToBytes("EC83D625CB1BF099A167234F79C4F58E3DAD8DF4569CE87C961B37EB02145B4B14C3850296C295BBF6B1EEB057A6E905A8347AA5D9F87E3990611038235081BE"),
                cert,
                Hex.HexToBytes(derHex)
            );

            Assert.True(registrationData.IsSignatureValid(clientDataHash, appId));
        }
    }
}
